<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://wxyyrain.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jan 2022 10:20:01 +0800</lastBuildDate><atom:link href="https://wxyyrain.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前置知识</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/0_pre/</link>
      <pubDate>Sun, 30 Jan 2022 10:20:01 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/0_pre/</guid>
      <description>倒排索引 #  核心组成 #    单词词典（Term Dictionary）
 记录所有文档的单词，记录单词到倒排列表的关联关系；一般比较大，可以通过B+树或者哈希拉链法实现，以满足高性能的插入与查询。
   倒排索引表（Posting List）
 记录了单词对应的文档集合，由倒排索引项组成。倒排索引项（Posting）：
 文档ID； 词频TF：该单词在文档中出现的次数，用于相关性评分； 位置（Position）：单词在文档中分词的位置。用于语句搜索（phrase query）； 偏移（Offset）：记录单词的开始结束位置，实现高亮显示。       默认使用 #   Elasticsearch的JSON文档中的每个字段，都有自己的倒排索引；
可以指定对某些字段不做索引：优点：节省空间；缺点：字段无法被搜索。
 搜索的相关性 #  搜索是用户和搜索引擎的对话，用户关心的是搜索引擎结果的相关性：
 是否可以找到所有相关的内容 有多少不相关的内容被返回了 文档的打分是否合理 结合业务需求，平衡结果排  衡量相关性：
 Precision（查准率）：尽可能返回较少无关文档 Recall（查全率）：尽量返回较多相关文档 Ranking：能否按照相关度排序   绿色代表应该被搜索到的结果，黄色代表不应该被搜索到的结果。
 Precision = True Postive / (True and False Positives)
Recall = True Postive / (True Positives + False Negtives)</description>
    </item>
    
    <item>
      <title>基本使用</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/1_basic/</link>
      <pubDate>Sat, 22 Jan 2022 10:58:18 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/1_basic/</guid>
      <description>基本概念 #  文档（Document） #    Elasticsearch是面向文档的，文档是所有课搜索数据的最小单位；
 可以理解为关系型数据库中的一条记录。
   文档会被序列化成JSON格式，保存在Elasticsearch 中；
 JSON对象由字段组成；每个字段都有对应的字段类型（字符串/数值/布尔/日期/二进制/范围类型）。
   每个文档都有一个Unique ID。
 可以自己指定ID；或者通过Elasticsearch自动生成。
   JSON文档 #   字段的类型可以通过指定或者通过Elasticsearch自动推算； 支持数组/嵌套。  文档元数据 #   _index：文档所属的索引名； _type：文档所属的类型名； _id：文档的唯一ID； _source：文档的原始JSON数据； _all：整合所有字段内容到该字段，已被废除； _version：文档的版本信息； _score：相关性打分。  Response元数据 #   took：花费的时间； total：符合条件的总文档数； hits：结果集，默认前十个文档； _index：索引名； _id：文档的id； _score：相关度评分； _source：文档原始信息。  索引（Index） #   索引是文档的容器，是一类文档的集合。Index体现了逻辑空间的概念：每个索引都有自己的Mapping定义，用于定义包含的文档字段名和字段类型；Shard体现了物理空间的概念：索引中的数据分散在Shard上。
   Mapping定义文档字段的类型
  Setting定义不同的数据分布</description>
    </item>
    
    <item>
      <title>分布式原理</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/2_distribute/</link>
      <pubDate>Sun, 26 Dec 2021 12:14:33 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/2_distribute/</guid>
      <description>分布式特性 #   Elasticsearch 天生就是分布式架构。
   高可用性
 服务可用性：允许有节点停止服务； 数据可用性：部分节点丢失，不会丢失数据。    可扩展性
 请求量提升/数据不断增长（将数据分布到所有节点上）。    带来的好处
 存储支持水平扩容，支持PB级数据； 提高系统的可用性，部分节点停止服务，整个集群的服务不受影响。    不同集群的设置
 不同的集群通过不同的名字来区分，默认名字 elasticsearch ； 通过配置文件修改，或者在命令行中 -E cluster.name = clustername 进行设定。    节点 #   节点是一个Elasticsearch 的实例，其本质就是一个JAVA进程。一台机器上可以运行多个Elasticsearch进程，但是生产环境一般建议一台机器上就运行一个Elasticsearch实例。
每一个节点都有名字，通过配置文件配置，或者启动的时候 -E node.name = nodename指定；每一个节点在启动之后，会分配一个UID，保存在data目录下。
   Coordinating Node
 处理请求的节点，叫Coordinating Node。路由请求道正确的节点，例如创建索引的请求，需要路由到Master节点。
  所有节点默认都是Coordinating Node； 通过将其他类型设置为False，使其成为Dedicated Coordinating Node。    Data Node</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/3_search/</link>
      <pubDate>Sun, 26 Dec 2021 14:53:16 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/3_search/</guid>
      <description>基于词项和基于全文搜索 #  基于Term的查询 #   Term是表达语义的最小单位，在Elasticsearch中，Term查询，对输入不做分词。会将输入作为一个整体，在倒排索引中查找准确的词项，并且使用相关度算分公式，为每个包含该词项的文档进行相关度算分。
  准确查询不需要算分，可以通过 Constant Score 将查询转换成一个Filtering，避免算分，并利用缓存，提高性能。
   Constant Score
{ &amp;#34;query&amp;#34;: { &amp;#34;constant_score&amp;#34;: { &amp;#34;filter&amp;#34;: { &amp;#34;term&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;&amp;#34; } } } } }   一些TermLevelQuery
 Term Query（精确查询） Range Query（范围查询） Exists Query（存在查询） Prefix Query（前缀查询） Wildcard Query（通配符查询）    基于全文的查询 #   索引和搜索时都会进行分词，查询字符串先传递到一个合适的分词器，然后生成一个共查询的词项列表。
查询的时候，会先对输入的查询进行分词，然后每个词项逐个进行底层的查询，最终将结果进行合并，并为每个文档生成一个算分。
 如下，查 “Matrix reloaded”，会查到包括Matrix或者reload的所有结果。
 一些全文Query  Match Query Match Phrase Query Query String Query    查询结果比较 #  假设有一条文档：{ &amp;ldquo;productID&amp;rdquo; : &amp;ldquo;XHDK-A-1293-#fJ3&amp;rdquo;,&amp;ldquo;desc&amp;rdquo;:&amp;ldquo;iPhone&amp;rdquo; }，desc字段是text类型，desc.</description>
    </item>
    
    <item>
      <title>聚合</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/4_aggs/</link>
      <pubDate>Sun, 26 Dec 2021 14:53:26 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/4_aggs/</guid>
      <description>聚合语法 #  { &amp;#34;size&amp;#34;: 0, &amp;#34;aggs&amp;#34;: { // 与query同级的关键词  &amp;#34;&amp;lt;aggs_name&amp;gt;&amp;#34;: { // 自定义的聚合名字  &amp;#34;&amp;lt;aggs_type&amp;gt;&amp;#34;: { // 聚合的定义：不同的Type + Body  &amp;lt;aggs_body&amp;gt; }, &amp;#34;aggs&amp;#34;: {} // 子聚合查询  }, &amp;#34;&amp;lt;aggs_name_2&amp;gt;&amp;#34; : {} // 可以包含多个同级的聚合查询  } } Metric #   一些系列的统计方法，会基于数据集计算结果，除了支持在字段上进行计算，同样也支持在脚本（painless script）产生的结果之上进行计算，类比SQL中的max、min等函数。
   单值分析：只输出一个分析结果
   aggs_type 含义     min 最小值   max 最大值   avg 平均值   sum 求和   cardinality 去重求数量，相当于distinct count      多值分析</description>
    </item>
    
    <item>
      <title>数据建模</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/5_model_design/</link>
      <pubDate>Thu, 30 Dec 2021 22:14:08 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/5_model_design/</guid>
      <description>反范式化设计 #  关系型数据库范式化设计 #   1NF - 消除 非主属性 对键的 部分函数依赖； 2NF - 消除 非主要属性 对键的 传递函数依赖； 3NF - 消除 主属性 对键的 传递函数依赖； BCNF - 主属性 不依赖于 主属性。   范式化设计（Normalization）的主要目标是“减少”不必要的更新；副作用：一个完全范式化设计的数据库会经常面临“查询缓慢”的问题，因为数据库越范式化，就需要Join 越多表。
范式化节省了存储空间，但是存储空间却越来越便宜；范式化简化了更新，但是数据“读”操作可能更频繁。
 Denormailzation #   反范式化设计，数据“Flattening”，不使用关联关系，而是在文档中保存冗余的数据拷贝。
   优点：无需处理 Joins 操作，数据读取性能好；
 Elasticsearch 通过压缩_source字段，减少磁盘空间开销。
   缺点：不适合在数据频繁修改的场景。例如，一条数据（用户名）的改动，可能会引起很多数据的更新。
  处理关联关系 #   关系型数据库，一般会考虑Normalize数据；在Elasticsearch，往往考虑Denormalize 数据；Denormalize 的好处：读的速度变快/无需表连接/ 无需行锁等。
  对象类型 嵌套对象（Nested Object） 父子关联关系（Parent/Child） 应用端关联  对象类型数组查询问题 #  存储时，内部对象的边界没有考虑在内，JSON 格式被处理成扁平式键值对的结构，对多个字段查询时，可能会导致意外结果。</description>
    </item>
    
    <item>
      <title>水平扩展集群</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/6_scale_out/</link>
      <pubDate>Thu, 30 Dec 2021 22:20:36 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/6_scale_out/</guid>
      <description>常见的集群部署方式 #  单一职责节点 #   在开发环境中，一个节点可承担多种角色。在生产环境，根据数据量，写入和查询的吞吐量，选择合适的部署方式，建议设置单一角色节点（dedicated node）。
一个节点在默认情况下会同时扮演：master eligible、data node、coordinating node 和 ingest node，通过参数配置，让一个节点只承担一个角色。
   参数配置
   单一节点 配置     Master node.master: true、node.ingest: false、node.data: false   Data node.master: false、node.ingest: false、node.data: true   Coordinate node.master: false、node.ingest: true、node.data: false   Ingest node.master: false、node.ingest: false、node.data: false      职责分离的优势
 对于不同角色的节点，可以使用不同的配置。
   Dedicated master eligible nodes</description>
    </item>
    
    <item>
      <title>集群运维</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/7_cluster_setting/</link>
      <pubDate>Thu, 14 Jan 2021 22:15:37 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/7_cluster_setting/</guid>
      <description>常用配置 #  开发模式和生产模式 #   从ES 5开始，支持 Development和Production 两种运行模式。
 Bootstrap Checks #   一个集群在Production Mode时，启动时必须通过所有Bootstrap 检测，否则会启动失败。Bootstrap Checks 可以分为两类 JVM &amp;amp; Linux Checks。Linux Checks只针对Linux系统。
 JVM设定 #   从ES 6开始，只支持 64 位的JVM，JVM的设置可以在config/jvm.options中设置。尽量避免修改默认配置：
 将内存 Xms 和 Xmx 设置成一样，避免heap resize 时引发停顿 Xmx设置不要超过物理内存的 50%（lucene索引会用内存）；单个节点，最大内存建议不超过32G（JVM内存小于32G时会使用指针压缩技术） 生产环境，JVM必须使用Server模式 关闭JVM Swapping   集群配置设定 #    静态设定
 静态配置文件尽量简洁：按照文档设置所有相关系统参数。elasticsearch.yml 配置文件中尽量只写必备参数。
   动态设定
 其他的设置项可以通过 API 动态进行设定。动态设定分 transient 和 persistent 两种，都会覆盖 elasticsearch.</description>
    </item>
    
    <item>
      <title>索引生命周期管理</title>
      <link>https://wxyyrain.github.io/docs/elasticsearch/mds/8_index_lifecycle/</link>
      <pubDate>Sun, 09 Jan 2022 12:26:02 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/elasticsearch/mds/8_index_lifecycle/</guid>
      <description>索引管理API #    Open / Close Index
 索引关闭后无法进行读写，但是索引数据不会被删除。
 // 关闭索引 POST /索引名/_close // 索引存在 HEAD 索引名 // 打开索引 POST /索引名/_open   Shrink Index
 可以将索引的主分片数收缩到较小的值。使用场景：
 索引保存的数据量比较小，需要重新设定主分片； 索引从Hot 移动到 Warm后，需要降低主分片数。    会使用和索引源相同的配置创建一个新的索引，仅仅降低主分片数。源分片数必须是目标分片数的倍数。如果源分片数是素数，目标分片数只能为1；如果文件系统支持硬链接，会将Segments 硬连接到目标索引，所以性能好（相比较于Reindex）。完成后，可以删除源索引。
  使用要求：
 分片必须只读； 所有分片必须在同一个节点上； 集群健康状态为 Green。   POST my_source_index/_shrink/my_target_index { &amp;#34;settings&amp;#34;: { &amp;#34;index.number_of_replicas&amp;#34;: 0, &amp;#34;index.number_of_shards&amp;#34;: 2, &amp;#34;index.codec&amp;#34;: &amp;#34;best_compression&amp;#34; }, &amp;#34;aliases&amp;#34;: { &amp;#34;my_search_indices&amp;#34;: {} } }   Split Index</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>https://wxyyrain.github.io/docs/mysql/mds/0_index/</link>
      <pubDate>Thu, 27 Jan 2022 08:58:27 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/mysql/mds/0_index/</guid>
      <description>索引的类型 #   索引的出现是为了提高数据查询的效率，就像书的目录一样。实现索引的方式也有很多种，MySQL有如下几种类型的索引。
 哈希索引 #   哈希索引是基于哈希表这种数据结构的索引。
   优点
 新增、精确查询都很快，O(1)的时间复杂度。
   缺点
  无法用于排序和分组； 区间查询很慢。     适用场景：等值查询
  全文索引 #   MyISAM存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。 查找条件使用MATCH AGAINST，而不是普通的WHERE。
全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。
InnoDB存储引擎在MySQL 5.6.4 版本中也开始支持全文索引。
 B+树索引 #  不同数据结构的出现，主要是为了解决不同场景，不同操作的效率问题。B+树是适合存在磁盘的数据结构，它有以下特点：
  B+树的每个节点都是一页；
 从磁盘读取数据的时候，并不是一条一条读的，而是读“一块”（好几条）数据到内存。在MySQL中，这“一块”的单位就是页，默认大小为16k。
   B+树是N叉树，N取决于字段的大小和页的大小；
 假设一棵二叉树高度为5，目标值在树的底部，那么在进行深度优先搜索过程中，就需要经过5个节点。对于存储在磁盘的B+树来说，经过5个节点就意味着要查询5次磁盘，是比较耗时的操作。如果这棵树的高度低一些，就意味着可以少进行几次查询磁盘的操作。
  同样一棵树，每个节点的子节点（扇出）越多，那么它的树高也越低。所以B+树是N叉树的结构，是更适合磁盘的数据结构。
  以整数（bigint）字段索引为例，一个key为8B，一个引用约为6B，所以一条数据的索引占据空间约为14B，一页可以存：16K/14B ≈ 1170 条数据的索引，也就是说，此时N = 1170，是1170叉树。</description>
    </item>
    
  </channel>
</rss>
