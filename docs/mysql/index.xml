<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on My New Hugo Site</title>
    <link>https://wxyyrain.github.io/docs/mysql/</link>
    <description>Recent content in MySQL on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Dec 2021 12:14:33 +0800</lastBuildDate><atom:link href="https://wxyyrain.github.io/docs/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>索引</title>
      <link>https://wxyyrain.github.io/docs/mysql/mds/0_index/</link>
      <pubDate>Thu, 27 Jan 2022 08:58:27 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/mysql/mds/0_index/</guid>
      <description>索引的类型 #   索引的出现是为了提高数据查询的效率，就像书的目录一样。实现索引的方式也有很多种，MySQL有如下几种类型的索引。
 哈希索引 #   哈希索引是基于哈希表这种数据结构的索引。
   优点
 新增、精确查询都很快，O(1)的时间复杂度。
   缺点
  无法用于排序和分组； 区间查询很慢。     适用场景：等值查询
  全文索引 #   MyISAM存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。 查找条件使用MATCH AGAINST，而不是普通的WHERE。
全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。
InnoDB存储引擎在MySQL 5.6.4 版本中也开始支持全文索引。
 B+树索引 #  不同数据结构的出现，主要是为了解决不同场景，不同操作的效率问题。B+树是适合存在磁盘的数据结构，它有以下特点：
  B+树的每个节点都是一页；
 从磁盘读取数据的时候，并不是一条一条读的，而是读“一块”（好几条）数据到内存。在MySQL中，这“一块”的单位就是页，默认大小为16k。
   B+树是N叉树，N取决于字段的大小和页的大小；
 假设一棵二叉树高度为5，目标值在树的底部，那么在进行深度优先搜索过程中，就需要经过5个节点。对于存储在磁盘的B+树来说，经过5个节点就意味着要查询5次磁盘，是比较耗时的操作。如果这棵树的高度低一些，就意味着可以少进行几次查询磁盘的操作。
  同样一棵树，每个节点的子节点（扇出）越多，那么它的树高也越低。所以B+树是N叉树的结构，是更适合磁盘的数据结构。
  以整数（bigint）字段索引为例，一个key为8B，一个引用约为6B，所以一条数据的索引占据空间约为14B，一页可以存：16K/14B ≈ 1170 条数据的索引，也就是说，此时N = 1170，是1170叉树。</description>
    </item>
    
  </channel>
</rss>
