<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构和算法 on My New Hugo Site</title>
    <link>https://wxyyrain.github.io/docs/algorithm/</link>
    <description>Recent content in 数据结构和算法 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Jan 2022 15:47:28 +0800</lastBuildDate><atom:link href="https://wxyyrain.github.io/docs/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基础数据结构</title>
      <link>https://wxyyrain.github.io/docs/algorithm/mds/base_data_structure/</link>
      <pubDate>Mon, 31 Jan 2022 15:47:28 +0800</pubDate>
      
      <guid>https://wxyyrain.github.io/docs/algorithm/mds/base_data_structure/</guid>
      <description>数组 #   数组是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。
 特点 #    线性表
 线性表就是数据排列像一条线一样的数据结构，每个线性表上的数据最多只有前和后两个方向。
  链表、队列、栈等也是线性表结构。
  二叉树、堆、图等，是非线性表，因为数据之间并不是简单的前后关系。
   连续的内存空间和相同的数据类型
 这两个限制，使数组有了随机访问的特性，计算机可以使用以下寻址公式，随机访问数组中的某个元素：
 a[i]_address = base_address + i * data_type_size  base_address 为数组的起始地址，data_type_size是每个元素占用的内存的大小，i是元素的索引。
   低效的插入和删除
 为了保证数组的连续性，在进行插入、删除操作的时候，需要做大量的数据迁移工作，因此效率会低一些。
   插入
 假设数组的长度为 n，如果需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，需要将第 k～n 这部分的元素都顺序地往后挪一位。
如果数据插在末尾，这时的时间复杂度为 O(1)。
但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。平均情况时间复杂度为 (1+2+…n)/n=O(n)。
   删除
 跟插入数据类似，如果要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。
   优化</description>
    </item>
    
  </channel>
</rss>
